import { create } from "zustand"

export interface Merchant {
  id: string
  name: string
  x: number
  y: number
  icon: string
  color: string
  item: string
  price: number
}

export interface Quiz {
  question: string
  options: string[]
  correctAnswer: number
}

export interface GameState {
  playerPos: { x: number; y: number }
  merchants: Merchant[]
  inventory: Record<string, number>
  rice: number
  timeLeft: number
  gameOver: boolean
  showQuiz: boolean
  currentQuiz: Quiz | null
  currentMerchant: Merchant | null
  nearbyMerchant: Merchant | null
  message: string
  totalScore: number
}

const QUIZZES: Record<string, Quiz> = {
  wood: {
    question: "C∆° ch·∫ø ph√¢n ph·ªëi h√†ng h√≥a th·ªùi bao c·∫•p d·ª±a v√†o y·∫øu t·ªë n√†o?",
    options: ["K·∫ø ho·∫°ch v√† ch·ªâ ti√™u Nh√† n∆∞·ªõc giao", "Cung c·∫ßu th·ªã tr∆∞·ªùng", "Gi√° c·∫£ t·ª± do", "S·ª©c mua c·ªßa ng∆∞·ªùi d√¢n"],
    correctAnswer: 0,
  },
  tools: {
    question: '"Kho√°n 100" √°p d·ª•ng trong lƒ©nh v·ª±c n√†o?',
    options: ["C√¥ng nghi·ªáp", "N√¥ng nghi·ªáp", "D·ªãch v·ª•", "Th∆∞∆°ng m·∫°i"],
    correctAnswer: 1,
  },
  bicycle: {
    question: "ƒê·∫°i h·ªôi VI (1986) c√≥ √Ω nghƒ©a g√¨?",
    options: [
      "TƒÉng c∆∞·ªùng kinh t·∫ø bao c·∫•p",
      "B·∫Øt ƒë·∫ßu c√¥ng cu·ªôc ƒë·ªïi m·ªõi kinh t·∫ø",
      "Ph√°t tri·ªÉn c√¥ng nghi·ªáp n·∫∑ng",
      "M·ªü r·ªông h·ª£p t√°c x√£",
    ],
    correctAnswer: 1,
  },
  meat: {
    question: "Tem phi·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?",
    options: ["Trang tr√≠ nh√† c·ª≠a", "Ph√¢n ph·ªëi h√†ng h√≥a theo ƒë·ªãnh m·ª©c", "Thanh to√°n ti·ªÅn l∆∞∆°ng", "Ghi ch√©p k·∫ø ho·∫°ch"],
    correctAnswer: 1,
  },
  fish: {
    question: "K·∫ø ho·∫°ch 5 nƒÉm l·∫ßn th·ª© nh·∫•t (1976-1980) t·∫≠p trung v√†o lƒ©nh v·ª±c n√†o?",
    options: ["N√¥ng nghi·ªáp", "C√¥ng nghi·ªáp nh·∫π", "C√¥ng nghi·ªáp n·∫∑ng", "D·ªãch v·ª•"],
    correctAnswer: 2,
  },
  spice: {
    question: "C·∫£i c√°ch gi√°-l∆∞∆°ng-ti·ªÅn nƒÉm 1985 d·∫´n ƒë·∫øn h·∫≠u qu·∫£ g√¨?",
    options: ["TƒÉng tr∆∞·ªüng kinh t·∫ø", "L·∫°m ph√°t cao, ti·ªÅn m·∫•t gi√°", "Gi·∫£m gi√° h√†ng h√≥a", "TƒÉng s·∫£n xu·∫•t"],
    correctAnswer: 1,
  },
  vegetables: {
    question: "Nh√† n∆∞·ªõc qu·∫£n l√Ω n·ªÅn kinh t·∫ø bao c·∫•p b·∫±ng c√°ch n√†o?",
    options: [
      "ƒê·ªÉ th·ªã tr∆∞·ªùng t·ª± ƒëi·ªÅu ch·ªânh",
      "L·∫≠p k·∫ø ho·∫°ch chi ti·∫øt v√† ph√¢n b·ªï v·∫≠t t∆∞",
      "Khuy·∫øn kh√≠ch kinh t·∫ø t∆∞ nh√¢n",
      "H·ª£p t√°c v·ªõi c√°c n∆∞·ªõc ngo√†i",
    ],
    correctAnswer: 1,
  },
}

interface Score {
  playerName: string
  score: number
  itemsCollected: number
  timestamp: number
}

interface GameStoreState {
  gameState: GameState
  playerPos: { x: number; y: number }
  merchants: Merchant[]
  inventory: Record<string, number>
  rice: number
  timeLeft: number
  keysPressed: Set<string>
  handleKeyDown: (e: KeyboardEvent) => void
  handleKeyUp: (e: KeyboardEvent) => void
  handleQuizAnswer: (answerIndex: number) => void
  resetGame: () => void
  saveScore: (playerName: string, score: number, itemsCollected: number) => void
  getLeaderboard: () => Score[]
}

const MERCHANTS: Merchant[] = [
  { id: "wood", name: "Ng∆∞·ªùi B√°n C·ªßi", x: 2, y: 2, icon: "ü™µ", color: "#8b4513", item: "wood", price: 5 },
  { id: "tools", name: "Ng∆∞·ªùi B√°n D·ª•ng C·ª•", x: 12, y: 2, icon: "üîß", color: "#d4a574", item: "tools", price: 8 },
  { id: "bicycle", name: "Ng∆∞·ªùi B√°n Xe ƒê·∫°p", x: 2, y: 10, icon: "üö≤", color: "#c85a3a", item: "bicycle", price: 15 },
  { id: "meat", name: "Ng∆∞·ªùi B√°n Th·ªãt", x: 7, y: 5, icon: "ü•©", color: "#a0826d", item: "meat", price: 10 },
  { id: "fish", name: "Ng∆∞·ªùi B√°n C√°", x: 12, y: 10, icon: "üêü", color: "#6b5d4f", item: "fish", price: 8 },
  { id: "spice", name: "Ng∆∞·ªùi B√°n Gia V·ªã", x: 7, y: 1, icon: "üå∂Ô∏è", color: "#e8956f", item: "spice", price: 3 },
  { id: "vegetables", name: "Ng∆∞·ªùi B√°n Rau", x: 1, y: 6, icon: "ü•¨", color: "#9d8b7e", item: "vegetables", price: 6 },
]

export const useGameStore = create<GameStoreState>((set, get) => ({
  gameState: {
    playerPos: { x: 7, y: 6 },
    merchants: MERCHANTS,
    inventory: { wood: 0, tools: 0, bicycle: 0, meat: 0, fish: 0, spice: 0, vegetables: 0 },
    rice: 20,
    timeLeft: 300,
    gameOver: false,
    showQuiz: false,
    currentQuiz: null,
    currentMerchant: null,
    nearbyMerchant: null,
    message: "",
    totalScore: 0,
  },
  playerPos: { x: 7, y: 6 },
  merchants: MERCHANTS,
  inventory: { wood: 0, tools: 0, bicycle: 0, meat: 0, fish: 0, spice: 0, vegetables: 0 },
  rice: 20,
  timeLeft: 300,
  keysPressed: new Set(),

  handleKeyDown: (e: KeyboardEvent) => {
    const key = e.key.toLowerCase()
    if (["arrowup", "arrowdown", "arrowleft", "arrowright", "w", "a", "s", "d"].includes(key)) {
      e.preventDefault()
      const keysPressed = new Set(get().keysPressed)
      keysPressed.add(key)
      set({ keysPressed })

      const state = get()
      let newX = state.playerPos.x
      let newY = state.playerPos.y

      if (keysPressed.has("arrowup") || keysPressed.has("w")) newY = Math.max(0, newY - 1)
      if (keysPressed.has("arrowdown") || keysPressed.has("s")) newY = Math.min(11, newY + 1)
      if (keysPressed.has("arrowleft") || keysPressed.has("a")) newX = Math.max(0, newX - 1)
      if (keysPressed.has("arrowright") || keysPressed.has("d")) newX = Math.min(14, newX + 1)

      const nearbyMerchant = MERCHANTS.find((m) => Math.abs(m.x - newX) <= 1 && Math.abs(m.y - newY) <= 1)

      set({
        playerPos: { x: newX, y: newY },
        gameState: {
          ...state.gameState,
          playerPos: { x: newX, y: newY },
          nearbyMerchant: nearbyMerchant || null,
        },
      })
    }

    if (key === "enter") {
      const state = get()
      if (state.gameState.nearbyMerchant && !state.gameState.showQuiz) {
        const merchant = state.gameState.nearbyMerchant
        const quiz = QUIZZES[merchant.item]
        set({
          gameState: {
            ...state.gameState,
            showQuiz: true,
            currentQuiz: quiz,
            currentMerchant: merchant,
          },
        })
      }
    }
  },

  handleKeyUp: (e: KeyboardEvent) => {
    const key = e.key.toLowerCase()
    const keysPressed = new Set(get().keysPressed)
    keysPressed.delete(key)
    set({ keysPressed })
  },

  handleQuizAnswer: (answerIndex: number) => {
    const state = get()
    const quiz = state.gameState.currentQuiz
    const merchant = state.gameState.currentMerchant

    if (!quiz || !merchant) return

    const isCorrect = answerIndex === quiz.correctAnswer
    const cost = isCorrect ? Math.ceil(merchant.price * 0.5) : merchant.price

    if (state.rice >= cost) {
      const newInventory = { ...state.gameState.inventory }
      newInventory[merchant.item] = 1
      const newRice = state.rice - cost

      const message = isCorrect ? `Ch√≠nh x√°c! B·∫°n ƒë∆∞·ª£c gi·∫£m gi√° 50% üëè` : `Sai r·ªìi! B·∫°n ph·∫£i tr·∫£ ƒë·ªß gi√° tr·ªã üòÖ`

      set({
        rice: newRice,
        inventory: newInventory,
        gameState: {
          ...state.gameState,
          inventory: newInventory,
          rice: newRice,
          showQuiz: false,
          currentQuiz: null,
          currentMerchant: null,
          message: message,
          totalScore: state.gameState.totalScore + (isCorrect ? 10 : 0),
        },
      })

      setTimeout(() => {
        set({
          gameState: {
            ...get().gameState,
            message: "",
          },
        })
      }, 2000)
    }
  },

  resetGame: () => {
    set({
      gameState: {
        playerPos: { x: 7, y: 6 },
        merchants: MERCHANTS,
        inventory: { wood: 0, tools: 0, bicycle: 0, meat: 0, fish: 0, spice: 0, vegetables: 0 },
        rice: 20,
        timeLeft: 300,
        gameOver: false,
        showQuiz: false,
        currentQuiz: null,
        currentMerchant: null,
        nearbyMerchant: null,
        message: "",
        totalScore: 0,
      },
      playerPos: { x: 7, y: 6 },
      inventory: { wood: 0, tools: 0, bicycle: 0, meat: 0, fish: 0, spice: 0, vegetables: 0 },
      rice: 20,
      timeLeft: 300,
    })
  },

  saveScore: (playerName: string, score: number, itemsCollected: number) => {
    const scores = JSON.parse(localStorage.getItem("gameScores") || "[]") as Score[]
    scores.push({
      playerName,
      score,
      itemsCollected,
      timestamp: Date.now(),
    })
    scores.sort((a, b) => b.score - a.score)
    localStorage.setItem("gameScores", JSON.stringify(scores.slice(0, 100)))
  },

  getLeaderboard: () => {
    return JSON.parse(localStorage.getItem("gameScores") || "[]").slice(0, 10)
  },
}))

// Game loop
setInterval(() => {
  const state = useGameStore.getState()
  if (!state.gameState.gameOver && state.timeLeft > 0) {
    const newTimeLeft = state.timeLeft - 1
    useGameStore.setState({
      timeLeft: newTimeLeft,
      gameState: {
        ...state.gameState,
        timeLeft: newTimeLeft,
        gameOver: newTimeLeft === 0,
      },
    })
  }
}, 1000)
